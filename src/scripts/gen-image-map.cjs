#!/usr/bin/env node
// Auto-generates src/imageMap.ts from cards listed in src/assets/data/cards.csv
// Looks for matching image files under src/assets/cards/<id>.(png|jpg|jpeg|svg)
// and emits new URL(..., import.meta.url).href entries only for files that exist.

const fs = require('fs');
const path = require('path');

function parseCSV(raw) {
  const lines = raw.replace(/\r\n?/g, '\n').split('\n').filter(l => l.trim().length > 0);
  if (!lines.length) return [];
  const headers = splitCsvLine(lines[0]).map(h => h.trim());
  const rows = [];
  for (let i = 1; i < lines.length; i++) {
    const parts = splitCsvLine(lines[i]);
    const r = {};
    headers.forEach((h, idx) => { r[h] = (parts[idx] ?? '').trim(); });
    rows.push(r);
  }
  return rows;
}

function splitCsvLine(line) {
  const out = [];
  let cur = '';
  let inQuotes = false;
  for (let i = 0; i < line.length; i++) {
    const ch = line[i];
    if (inQuotes) {
      if (ch === '"') {
        if (line[i + 1] === '"') { cur += '"'; i++; } else { inQuotes = false; }
      } else cur += ch;
    } else {
      if (ch === ',') { out.push(cur); cur = ''; }
      else if (ch === '"') { inQuotes = true; }
      else cur += ch;
    }
  }
  out.push(cur);
  return out;
}

function main() {
  const projectRoot = process.cwd();
  const srcDir = path.join(projectRoot, 'src');
  const csvPath = path.join(srcDir, 'assets', 'data', 'cards.csv');
  const cardsDir = path.join(srcDir, 'assets', 'cards');
  const outPath = path.join(srcDir, 'imageMap.ts');

  if (!fs.existsSync(csvPath)) {
    console.error('[gen-image-map] Missing CSV at', csvPath);
    process.exit(0);
  }
  const raw = fs.readFileSync(csvPath, 'utf8');
  const rows = parseCSV(raw);
  const ids = Array.from(new Set(rows.map(r => r.id).filter(Boolean)));

  const exts = ['png', 'jpg', 'jpeg', 'svg'];
  const entries = [];
  for (const id of ids) {
    let found = null;
    for (const ext of exts) {
      const p = path.join(cardsDir, `${id}.${ext}`);
      if (fs.existsSync(p)) { found = { id, ext }; break; }
    }
    if (found) {
      entries.push(found);
    } else {
      // Skip silently if no file exists; the app will show a fallback
    }
  }

  const header = `// Auto-generated by scripts/gen-image-map.cjs â€” do not edit\n`;
  const lines = [
    header,
    `export const CARD_IMAGE_URLS: Record<string, string> = {`,
    ...entries.map(({ id, ext }) => `  '${id}': new URL('./assets/cards/${id}.${ext}', import.meta.url).href,`),
    `};`,
    `export default CARD_IMAGE_URLS;`,
    ``,
  ];

  fs.writeFileSync(outPath, lines.join('\n'));
  console.log(`[gen-image-map] Wrote ${entries.length} entries to`, path.relative(projectRoot, outPath));
}

main();

