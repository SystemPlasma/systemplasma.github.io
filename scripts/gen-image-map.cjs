#!/usr/bin/env node
/*
  Generates src/imageMap.ts from card IDs in src/assets/data/cards.csv.
  For each id, it points to ./assets/cards/<id>.<ext> via new URL(..., import.meta.url).

  Behavior when sources are missing:
  - If CSV or cards directory is missing, it still writes src/imageMap.ts with an empty map
    so builds don’t fail.
*/

const fs = require('fs');
const path = require('path');

function parseCSV(raw) {
  const lines = raw.replace(/\r\n?/g, '\n').split('\n').filter(l => l.trim().length > 0);
  if (!lines.length) return [];
  const headers = splitCsvLine(lines[0]).map(h => h.trim());
  const rows = [];
  for (let i = 1; i < lines.length; i++) {
    const parts = splitCsvLine(lines[i]);
    const r = {};
    headers.forEach((h, idx) => { r[h] = (parts[idx] ?? '').trim(); });
    rows.push(r);
  }
  return rows;
}

function splitCsvLine(line) {
  const out = [];
  let cur = '';
  let inQuotes = false;
  for (let i = 0; i < line.length; i++) {
    const ch = line[i];
    if (inQuotes) {
      if (ch === '"') {
        if (line[i + 1] === '"') { cur += '"'; i++; } else { inQuotes = false; }
      } else cur += ch;
    } else {
      if (ch === ',') { out.push(cur); cur = ''; }
      else if (ch === '"') { inQuotes = true; }
      else cur += ch;
    }
  }
  out.push(cur);
  return out;
}

function idVariants(id) {
  // Normalize patterns like foo_bar_1 -> foo_bar1 (remove underscore before digits)
  const variants = new Set([id, id.replace(/_(\d+)/g, '$1')]);
  return Array.from(variants);
}

function main() {
  const root = process.cwd();
  const srcDir = path.join(root, 'src');
  const dataCsv = path.join(srcDir, 'assets', 'data', 'cards.csv');
  const cardsDirSrc = path.join(srcDir, 'assets', 'cards');
  const cardsDirPublic = path.join(root, 'public', 'assets', 'cards');
  const outTs = path.join(srcDir, 'imageMap.ts');

  let ids = [];
  if (fs.existsSync(dataCsv)) {
    const raw = fs.readFileSync(dataCsv, 'utf8');
    const rows = parseCSV(raw);
    ids = Array.from(new Set(rows.map(r => r.id).filter(Boolean)));
  }

  const exts = ['png', 'jpg', 'jpeg', 'svg'];
  const entries = [];
  for (const id of ids) {
    let foundExt = null;
    for (const cand of idVariants(id)) {
      for (const ext of exts) {
        // Prefer the normalized filename we copy to public/cards
        const p = path.join(cardsDirPublic, `${id}.${ext}`);
        const pSrc = path.join(cardsDirSrc, `${cand}.${ext}`);
        if (fs.existsSync(p)) { foundExt = ext; break; }
        if (fs.existsSync(pSrc)) { foundExt = ext; break; }
      }
      if (foundExt) break;
    }
    const ext = foundExt || 'png';
    entries.push({ id, ext });
  }

  const header = `// Auto-generated by scripts/gen-image-map.cjs — do not edit\n`;
  const lines = [
    header,
    `const __BASE = (typeof import.meta !== 'undefined' && (import.meta as any).env?.BASE_URL) || '/';`,
    `export const CARD_IMAGE_URLS: Record<string, string> = {`,
    // Served from /public and published to dist under <base>/assets/cards/...
    ...entries.map(({ id, ext }) => `  '${id}': __BASE + 'assets/cards/${id}.${ext}',`),
    `};`,
    `export default CARD_IMAGE_URLS;`,
    ``,
  ];

  // Ensure src exists and write file (even if entries is empty)
  fs.mkdirSync(srcDir, { recursive: true });
  fs.writeFileSync(outTs, lines.join('\n'));
  console.log(`[gen-image-map] Wrote ${entries.length} entries to`, path.relative(root, outTs));
}

main();
